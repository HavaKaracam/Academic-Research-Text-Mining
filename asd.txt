C. REDIRECTON In this part of the project we are aiming to redirect our inputs to and output file or get output from index of an input file.Firstly we creat an integer value named redirect to hold the type of direction. redirect value is initally 0.. Then we send this value to out setup function.  In the setup function we detect the type of redirection using argument seperator. As we said there are five types of redirection and for each type of redirection, redirect values hold a different value. For append it holds 1, for truncate holds 2, for getting inputs from file holds 3, for writing standart error hold 4 and for getting input from file and writing output to another file it holds 5. In the picture above redirect value assign to different number by the sign of redirections. For append and truncate part, we create an integer named append in the setup function to hold if the redirection is append or truncate. If the command line contains two arrow like this ‘>>’, our program firstly detects first arrow and assing redirect value to 2 to indicate this truncate. After that if there is another > in the next character it assigns redirect value to 1 to indicate it is an append operation and then also assign append value to 1 to make sure that on the next iteration of the loop, program never enters in the same if and reassign redirect value to 2. We use very similiar code to detect if the operation is only input from file or input from file to output file.After getting our redirection type, now we will do operation by the current redirection type.If we have an append operation, we first create a file descriptor and create a new file by using open system call. We found our output file name via this method.In this method we check the argument list until we come to the end of the list. Then we return last argument before the end of the list. Because in append and truncate operations file name always is the last argument. If the file we try to create is exist in the current location, program appends the new output to end of the file by usin O_APPEND flag. We checks the error if the file descriptor values is less than zero.Nextly we duplicate the file descriptor and use the description number 1 to write file by using stdout. If dup2() function returns less than zero, the program prints error message. Finally we close file we have opened and program jumps to the setArrowNull method.  This method set null arrows for the all kinds of redirection to avoid exec function try to execute arrows as an input command.After that, our splitter method runs the command via exec function and exits the program.For truncate part, we have similiar structure of working to append. Only difference is we use O_TRUNC flag instead of O_APPEND flag. Therefore existing or not, everytime when we want wo write something in the file new output truncate the content of the file.If we have an input from file to screen operation, we use similiar structure. Only difference is we use only O_RDONLY flag to only read file and our description number in dup2() is 0. With this flag we cannot write or do anything on the file but reading.In the printing error part we also have the same structure.In the getting input from file and writing output to another file part is we create two file descriptors to get input from input file and write output to output file. In input descriptor we read input file and use the description number 0 in dup2() to read file. Then we open our output file by creating a new file or using existing one. Then we use description number 1 in dup2() function to write output to the file. Finally we close both file and exit the if statement.BONUS. PIPELINEIn this part of the project we try to make pipeline system in our shell. Pipeline is basically using an command’s output as another command’s input.We created an isPipe array with 3 elements. 0 for reading first command’s output and 1 for sending 0 to second command as an input.We have an isPipe value in main. This value is initially 0.Then we send this value to setup function to check if there is a pipe operation.  If there is pipe operaiton we assign isPipe to 1. If isPipe is 1 then in the child part, we use descriptor 0 to get first command’s output.We get the first command by using pipeInput method. In this function we take all commands to the | sign in the args array and put them in an argument array and then return this array.Then we execute the first command and exit the child part.Nextly we goes into the parent part. In this part we execute second command by using first command’s output as an input. We use descriptor 1 to print the output of the execution. We get out second command by using pipeOutput method. In this method we collect all the arguments in the args array from | sign to the end of the args array and put them in outputArgs array. Then we return this array.Finally we close the pipe and execute the outputArgs array as second command and exit the program.